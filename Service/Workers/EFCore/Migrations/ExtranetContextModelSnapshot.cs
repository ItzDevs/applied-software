// <auto-generated />
using System;
using AppliedSoftware.Workers.EFCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using NpgsqlTypes;

#nullable disable

namespace AppliedSoftware.Workers.EFCore.Migrations
{
    [DbContext(typeof(ExtranetContext))]
    partial class ExtranetContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AppliedSoftware.Models.DTOs.EmailAttachmentDto", b =>
                {
                    b.Property<long>("AttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("AttachmentId"));

                    b.Property<long>("EmailPackageActionDtoEmailId")
                        .HasColumnType("bigint");

                    b.Property<long>("EmailPackageActionId")
                        .HasColumnType("bigint");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("AttachmentId")
                        .HasName("email_attachment__pk");

                    b.HasIndex("EmailPackageActionDtoEmailId");

                    b.ToTable("email_attachment", (string)null);
                });

            modelBuilder.Entity("AppliedSoftware.Models.DTOs.EmailPackageActionDto", b =>
                {
                    b.Property<long>("EmailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("EmailId"));

                    b.Property<string>("Body")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<NpgsqlTsVector>("EmailTsVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Subject", "Body" });

                    b.Property<long>("PackageActionId")
                        .HasColumnType("bigint");

                    b.Property<string>("Recipients")
                        .HasColumnType("text");

                    b.Property<string>("Sender")
                        .HasColumnType("text");

                    b.Property<string>("Subject")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("EmailId")
                        .HasName("email_id_action__pk");

                    b.HasIndex("PackageActionId");

                    b.HasIndex(new[] { "EmailTsVector" }, "email_tsv__indx");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex(new[] { "EmailTsVector" }, "email_tsv__indx"), "GIN");

                    b.ToTable("email_package_action", (string)null);
                });

            modelBuilder.Entity("AppliedSoftware.Models.DTOs.GlobalPermissionDto", b =>
                {
                    b.Property<long>("GlobalPermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("GlobalPermissionId"));

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("GrantedGlobalPermission")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("GlobalPermissionId")
                        .HasName("global_permission__pk");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.HasIndex(new[] { "UserId" }, "global_permission_uid__indx");

                    b.ToTable("global_permission", (string)null);
                });

            modelBuilder.Entity("AppliedSoftware.Models.DTOs.PackageActionDto", b =>
                {
                    b.Property<long>("PackageActionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("PackageActionId"));

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PackageActionType")
                        .HasColumnType("integer");

                    b.Property<long>("PackageId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("PackageActionId")
                        .HasName("package_action__pk");

                    b.HasIndex(new[] { "PackageId", "PackageActionType" }, "package_action_unq__indx")
                        .IsUnique();

                    b.ToTable("package_action", (string)null);
                });

            modelBuilder.Entity("AppliedSoftware.Models.DTOs.PackageDto", b =>
                {
                    b.Property<long>("PackageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("PackageId"));

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("PackageId")
                        .HasName("package__pk");

                    b.HasIndex(new[] { "Name" }, "package_name_unq__indx")
                        .IsUnique();

                    b.ToTable("package", (string)null);
                });

            modelBuilder.Entity("AppliedSoftware.Models.DTOs.TeamDto", b =>
                {
                    b.Property<long>("TeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("TeamId"));

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DefaultAllowedPermissions")
                        .HasColumnType("integer");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("PackageId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("TeamId")
                        .HasName("team__pk");

                    b.HasIndex("PackageId");

                    b.HasIndex(new[] { "Name" }, "team_name__indx");

                    b.ToTable("team", (string)null);
                });

            modelBuilder.Entity("AppliedSoftware.Models.DTOs.UserDto", b =>
                {
                    b.Property<string>("Uid")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("Disabled")
                        .HasColumnType("boolean");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("FirebaseDisabled")
                        .HasColumnType("boolean");

                    b.Property<string>("FirebaseDisplayName")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Uid")
                        .HasName("user__pk");

                    b.HasIndex(new[] { "DisplayName" }, "user_display_name__indx");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("AppliedSoftware.Models.DTOs.UserGroupDto", b =>
                {
                    b.Property<long>("UserGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("UserGroupId"));

                    b.Property<int?>("AllowedPermissions")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("DisallowedPermissions")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserGroupId")
                        .HasName("user_group__pk");

                    b.HasIndex("TeamId");

                    b.ToTable("user_group", (string)null);
                });

            modelBuilder.Entity("AppliedSoftware.Models.DTOs.UserGroupPermissionOverrideDto", b =>
                {
                    b.Property<long>("UserGroupOverrideId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("UserGroupOverrideId"));

                    b.Property<int>("AllowedPermissions")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DisallowedPermissions")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<long>("PackageActionId")
                        .HasColumnType("bigint");

                    b.Property<long>("PackageId")
                        .HasColumnType("bigint");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("UserGroupId")
                        .HasColumnType("bigint");

                    b.HasKey("UserGroupOverrideId")
                        .HasName("user_group_permission_override__pk");

                    b.HasIndex("PackageActionId");

                    b.HasIndex("PackageId");

                    b.HasIndex("UserGroupId");

                    b.ToTable("user_group_permission_override", (string)null);
                });

            modelBuilder.Entity("AppliedSoftware.Models.DTOs.UserPermissionOverrideDto", b =>
                {
                    b.Property<long>("UserPermissionOverrideId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("UserPermissionOverrideId"));

                    b.Property<int>("AllowedPermissions")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DisallowedPermissions")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<long?>("PackageActionId")
                        .HasColumnType("bigint");

                    b.Property<long>("PackageId")
                        .HasColumnType("bigint");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserPermissionOverrideId")
                        .HasName("user_permission_override__pk");

                    b.HasIndex("PackageActionId");

                    b.HasIndex("PackageId");

                    b.HasIndex("UserId");

                    b.ToTable("user_permission_override", (string)null);
                });

            modelBuilder.Entity("PackageDtoUserDto", b =>
                {
                    b.Property<string>("AdministratorsUid")
                        .HasColumnType("text");

                    b.Property<long>("PackageAdministratorPackageId")
                        .HasColumnType("bigint");

                    b.HasKey("AdministratorsUid", "PackageAdministratorPackageId");

                    b.HasIndex("PackageAdministratorPackageId");

                    b.ToTable("PackageDtoUserDto");
                });

            modelBuilder.Entity("TeamDtoUserDto", b =>
                {
                    b.Property<long>("TeamsTeamId")
                        .HasColumnType("bigint");

                    b.Property<string>("UsersUid")
                        .HasColumnType("text");

                    b.HasKey("TeamsTeamId", "UsersUid");

                    b.HasIndex("UsersUid");

                    b.ToTable("TeamDtoUserDto");
                });

            modelBuilder.Entity("UserDtoUserGroupDto", b =>
                {
                    b.Property<long>("UserGroupsUserGroupId")
                        .HasColumnType("bigint");

                    b.Property<string>("UsersUid")
                        .HasColumnType("text");

                    b.HasKey("UserGroupsUserGroupId", "UsersUid");

                    b.HasIndex("UsersUid");

                    b.ToTable("UserDtoUserGroupDto");
                });

            modelBuilder.Entity("AppliedSoftware.Models.DTOs.EmailAttachmentDto", b =>
                {
                    b.HasOne("AppliedSoftware.Models.DTOs.EmailPackageActionDto", "EmailPackageActionDto")
                        .WithMany("Attachments")
                        .HasForeignKey("EmailPackageActionDtoEmailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmailPackageActionDto");
                });

            modelBuilder.Entity("AppliedSoftware.Models.DTOs.EmailPackageActionDto", b =>
                {
                    b.HasOne("AppliedSoftware.Models.DTOs.PackageActionDto", "PackageAction")
                        .WithMany("Emails")
                        .HasForeignKey("PackageActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PackageAction");
                });

            modelBuilder.Entity("AppliedSoftware.Models.DTOs.GlobalPermissionDto", b =>
                {
                    b.HasOne("AppliedSoftware.Models.DTOs.UserDto", "User")
                        .WithOne("GlobalPermission")
                        .HasForeignKey("AppliedSoftware.Models.DTOs.GlobalPermissionDto", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AppliedSoftware.Models.DTOs.PackageActionDto", b =>
                {
                    b.HasOne("AppliedSoftware.Models.DTOs.PackageDto", "Package")
                        .WithMany("Actions")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Package");
                });

            modelBuilder.Entity("AppliedSoftware.Models.DTOs.TeamDto", b =>
                {
                    b.HasOne("AppliedSoftware.Models.DTOs.PackageDto", "Package")
                        .WithMany("Teams")
                        .HasForeignKey("PackageId");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("AppliedSoftware.Models.DTOs.UserGroupDto", b =>
                {
                    b.HasOne("AppliedSoftware.Models.DTOs.TeamDto", "Team")
                        .WithMany("UserGroups")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("AppliedSoftware.Models.DTOs.UserGroupPermissionOverrideDto", b =>
                {
                    b.HasOne("AppliedSoftware.Models.DTOs.PackageActionDto", "PackageAction")
                        .WithMany("TeamPermissionOverrides")
                        .HasForeignKey("PackageActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppliedSoftware.Models.DTOs.PackageDto", "Package")
                        .WithMany()
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppliedSoftware.Models.DTOs.UserGroupDto", "UserGroup")
                        .WithMany()
                        .HasForeignKey("UserGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Package");

                    b.Navigation("PackageAction");

                    b.Navigation("UserGroup");
                });

            modelBuilder.Entity("AppliedSoftware.Models.DTOs.UserPermissionOverrideDto", b =>
                {
                    b.HasOne("AppliedSoftware.Models.DTOs.PackageActionDto", "PackageAction")
                        .WithMany("UserPermissionOverrides")
                        .HasForeignKey("PackageActionId");

                    b.HasOne("AppliedSoftware.Models.DTOs.PackageDto", "Package")
                        .WithMany()
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppliedSoftware.Models.DTOs.UserDto", "User")
                        .WithMany("UserPermissionOverrides")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Package");

                    b.Navigation("PackageAction");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PackageDtoUserDto", b =>
                {
                    b.HasOne("AppliedSoftware.Models.DTOs.UserDto", null)
                        .WithMany()
                        .HasForeignKey("AdministratorsUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppliedSoftware.Models.DTOs.PackageDto", null)
                        .WithMany()
                        .HasForeignKey("PackageAdministratorPackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TeamDtoUserDto", b =>
                {
                    b.HasOne("AppliedSoftware.Models.DTOs.TeamDto", null)
                        .WithMany()
                        .HasForeignKey("TeamsTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppliedSoftware.Models.DTOs.UserDto", null)
                        .WithMany()
                        .HasForeignKey("UsersUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserDtoUserGroupDto", b =>
                {
                    b.HasOne("AppliedSoftware.Models.DTOs.UserGroupDto", null)
                        .WithMany()
                        .HasForeignKey("UserGroupsUserGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppliedSoftware.Models.DTOs.UserDto", null)
                        .WithMany()
                        .HasForeignKey("UsersUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AppliedSoftware.Models.DTOs.EmailPackageActionDto", b =>
                {
                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("AppliedSoftware.Models.DTOs.PackageActionDto", b =>
                {
                    b.Navigation("Emails");

                    b.Navigation("TeamPermissionOverrides");

                    b.Navigation("UserPermissionOverrides");
                });

            modelBuilder.Entity("AppliedSoftware.Models.DTOs.PackageDto", b =>
                {
                    b.Navigation("Actions");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("AppliedSoftware.Models.DTOs.TeamDto", b =>
                {
                    b.Navigation("UserGroups");
                });

            modelBuilder.Entity("AppliedSoftware.Models.DTOs.UserDto", b =>
                {
                    b.Navigation("GlobalPermission")
                        .IsRequired();

                    b.Navigation("UserPermissionOverrides");
                });
#pragma warning restore 612, 618
        }
    }
}
